{"name": "Проверка ответов в блоке 'Вопросы о важном'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_accordion.TestAccordion object at 0x000001FC067B8F50>, index = 0\n\n    @allure.title(\"Проверка ответов в блоке 'Вопросы о важном'\")\n    @pytest.mark.parametrize(\"index\", range(8))\n    def test_accordion_text(self, index: int) -> None:\n        self.main_page.open()\n        self.main_page.scroll_to_accordion()\n>       self.main_page.click_accoudion_button_by_index(index)\n\ntests\\test_accordion.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\pages\\main_page.py:28: in click_accoudion_button_by_index\n    self.click(elements[index])\nsrc\\base\\base_page.py:35: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"21564d83a827629370af9a9a2ca92c29\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001FC0687DD00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "Прокрутка страницы до блока 'Вопросы о важном'", "status": "passed", "start": 1734427300628, "stop": 1734427300657}, {"name": "Раскрытие ответа на вопрос в блоке 'Вопрсоы о важном'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"D:\\Development\\GitHub\\Sprint_6\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"D:\\Development\\GitHub\\Sprint_6\\src\\pages\\main_page.py\", line 28, in click_accoudion_button_by_index\n    self.click(elements[index])\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"D:\\Development\\GitHub\\Sprint_6\\src\\base\\base_page.py\", line 35, in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Development\\GitHub\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "index", "value": "0"}], "start": 1734427300657, "stop": 1734427310784}], "parameters": [{"name": "index", "value": "0"}], "start": 1734427299623, "stop": 1734427310787, "uuid": "ed53fb59-16eb-4770-b991-3f9f2d0e9f39", "historyId": "071e7184dbaf575cae5dd0c136c1dafa", "testCaseId": "2c956c62108848a7c8736fcd0fd37826", "fullName": "tests.test_accordion.TestAccordion#test_accordion_text", "labels": [{"name": "feature", "value": "Блок 'Вопросы о важном' на главной странице"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_accordion"}, {"name": "subSuite", "value": "TestAccordion"}, {"name": "host", "value": "home"}, {"name": "thread", "value": "25088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_accordion"}]}